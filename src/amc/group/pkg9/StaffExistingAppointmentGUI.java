/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package amc.group.pkg9;

/**
 *
 * @author TAI KOK WAI
 */
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import java.util.stream.Collectors;

public class StaffExistingAppointmentGUI extends javax.swing.JFrame {

    private DefaultTableModel CustomerAppointment;
    private List<String[]> appointmentsData; // store all rows
    private final String filePath = "C:\\Users\\TAI KOK WAI\\Documents\\Java Project\\APU-Medical-Centre-AMC\\src\\amc\\group\\pkg9\\Appointments.txt";
    private static final Logger logger = Logger.getLogger(StaffExistingAppointmentGUI.class.getName());

    public StaffExistingAppointmentGUI() {
        // Step 1: Initialize the table model
        CustomerAppointment = new DefaultTableModel(
                new String[]{"AppointmentID", "CustomerID", "DoctorID", "DateTime", "Status"}, 0
        );

        // Step 2: Initialize GUI components
        initComponents();

        // Step 3: Set the table model to jTable1
        jTable1.setModel(CustomerAppointment);

        // Step 4: Load data and setup combo box
        getContentPane().setBackground(new java.awt.Color(233, 226, 219));
        loadAppointments();
        setupComboBoxListener();
    }

    private void loadAppointments() {
        appointmentsData = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            br.readLine(); // skip header line
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("\\s*\\|\\s*"); // split by " | "
                if (parts.length == 5) {
                    appointmentsData.add(parts);
                }
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Failed to load appointments", e);
        }
        refreshTable(appointmentsData);
    }

    private void refreshTable(List<String[]> data) {
        CustomerAppointment.setRowCount(0); // clear table
        for (String[] row : data) {
            CustomerAppointment.addRow(row);
        }
    }

    private void setupComboBoxListener() {
        jComboBox1.addActionListener(e -> {
            String selected = (String) jComboBox1.getSelectedItem();
            if (selected == null) return;

            List<String[]> sorted = new ArrayList<>(appointmentsData);

            switch (selected) {
                case "Name A-Z":
                    sorted.sort(Comparator.comparing(a -> a[1]));
                    break;
                case "Name Z-A":
                    sorted.sort(Comparator.comparing((String[] a) -> a[1]).reversed());
                    break;
                case "Status: Active":
                    sorted = sorted.stream().filter(a -> a[4].equalsIgnoreCase("booked")).collect(Collectors.toList());
                    break;
                case "Status: Inactive":
                    sorted = sorted.stream().filter(a -> !a[4].equalsIgnoreCase("booked")).collect(Collectors.toList());
                    break;
            }
            refreshTable(sorted);
        });
    }

    private void saveAppointmentsToFile() {
        try (PrintWriter pw = new PrintWriter(new FileWriter(filePath))) {
            pw.println("AppointmentID | CustomerID | DoctorID | DateTime | Status");
            for (String[] row : appointmentsData) {
                pw.println(String.join(" | ", row));
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Failed to save appointments", e);
        }
    }



    /**
     * Creates new form CustomerStatusGUI
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name A-Z", "Name Z-A", "Status: Active", "Status: Inactive" }));

        jTable1.setModel(CustomerAppointment);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Sort By:");

        jButton1.setText("Pay");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an appointment first!");
        return;
    }

    String appointmentID = (String) jTable1.getValueAt(selectedRow, 0);
    StaffPaymentSummaryGUI paymentSummaryGUI = new StaffPaymentSummaryGUI(appointmentID);
    paymentSummaryGUI.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment first!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete this appointment?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            String appointmentID = (String) jTable1.getValueAt(selectedRow, 0);
            appointmentsData.removeIf(a -> a[0].equals(appointmentID));
            refreshTable(appointmentsData);
            saveAppointmentsToFile();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new StaffExistingAppointmentGUI().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
