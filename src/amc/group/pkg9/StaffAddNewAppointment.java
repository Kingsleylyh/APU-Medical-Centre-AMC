/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package amc.group.pkg9;

import java.awt.Color;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.util.logging.*;

/**
 *
 * @author TAI KOK WAI
 */


public class StaffAddNewAppointment extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(StaffAddNewAppointment.class.getName());
    private DefaultTableModel DoctorEmptySlot = new DefaultTableModel();
    private String[] columnName = {"Appointment ID", "Customer ID", "Doctor ID", "DateTime", "Status"};
    private final String appointmentsFile = "C:\\Users\\TAI KOK WAI\\Documents\\Java Project\\APU-Medical-Centre-AMC\\src\\amc\\group\\pkg9\\Appointments.txt";

    /**
     * Creates new form StaffAddNewAppointment
     */
    public StaffAddNewAppointment() {
        DoctorEmptySlot.setColumnIdentifiers(columnName);
        initComponents();
        this.getContentPane().setBackground(new Color(233, 226, 219));
        setLocationRelativeTo(null); // center window
        loadAvailableAppointments();
//        this.getContentPane().setBackground(new java.awt.Color(233, 226, 219));
    }

    /**
     * Load appointments whose status is NOT booked
     */
//private void loadAvailableAppointments() {
//    try (BufferedReader br = new BufferedReader(new FileReader(appointmentsFile))) {
//        String line;
//        DoctorEmptySlot.setRowCount(0); // clear table
//
//        // Skip the first line (header)
//        br.readLine();
//
//        while ((line = br.readLine()) != null) {
//            String[] parts = line.split("\\s*\\|\\s*");
//            if (parts.length == 5 && !parts[4].equalsIgnoreCase("booked")) {
//                DoctorEmptySlot.addRow(parts);
//            }
//        }
//    } catch (IOException e) {
//        logger.log(Level.SEVERE, "Error reading appointments file", e);
//    }
//}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("New Appointment");

        jTable1.setModel(DoctorEmptySlot);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Book");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
              int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a slot first!");
        return;
    }

    String appointmentID = (String) jTable1.getValueAt(selectedRow, 0); // first column is AppointmentID
    bookSelectedAppointment(appointmentID);
}                                        

// Helper method to book appointment
private void bookSelectedAppointment(String appointmentID) {
    try {
        File file = new File(appointmentsFile);
        BufferedReader br = new BufferedReader(new FileReader(file));
        StringBuilder sb = new StringBuilder();
        String line;
        boolean booked = false;

        while ((line = br.readLine()) != null) {
            // Skip header line
            if (line.startsWith("AppointmentID")) {
                sb.append(line).append("\n");
                continue;
            }

            String[] parts = line.split("\\s*\\|\\s*");
            if (parts.length == 5 && parts[0].equals(appointmentID)) {
                parts[4] = "booked"; // update status
                booked = true;
            }
            sb.append(String.join(" | ", parts)).append("\n");
        }
        br.close();

        if (booked) {
            BufferedWriter bw = new BufferedWriter(new FileWriter(file));
            bw.write(sb.toString());
            bw.close();
            JOptionPane.showMessageDialog(this, "Appointment booked successfully!");
            loadAvailableAppointments(); // refresh table
        } else {
            JOptionPane.showMessageDialog(this, "Failed to book appointment.");
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error accessing appointment file.");
    }
}

// Refresh table with only not-booked appointments
    private void loadAvailableAppointments() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // clear table

    try (BufferedReader br = new BufferedReader(new FileReader(appointmentsFile))) {
        String line;
        boolean firstLine = true;
        while ((line = br.readLine()) != null) {
            if (firstLine) { // skip header
                firstLine = false;
                continue;
            }
            String[] parts = line.split("\\s*\\|\\s*");
            if (parts.length == 5 && !parts[4].equalsIgnoreCase("booked")) {
                model.addRow(parts);
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

//        int selectedRow = jTable1.getSelectedRow();
//        if (selectedRow == -1) {
//            JOptionPane.showMessageDialog(this, "Please select an appointment to book!");
//            return;
//        }
//
//        String appointmentID = (String) jTable1.getValueAt(selectedRow, 0);
//        // Update the status to booked in memory
//        jTable1.setValueAt("booked", selectedRow, 4);
//
//        // Save changes to file
//        saveAppointmentsToFile();
//
//        JOptionPane.showMessageDialog(this, "Appointment " + appointmentID + " booked successfully!");
//        loadAvailableAppointments(); // refresh table
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void saveAppointmentsToFile() {
        try (BufferedReader br = new BufferedReader(new FileReader(appointmentsFile));
             BufferedWriter bw = new BufferedWriter(new FileWriter(appointmentsFile))) {

            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("\\s*\\|\\s*");
                // Update status if table has it booked
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    if (parts[0].equals(jTable1.getValueAt(i, 0))) {
                        parts[4] = (String) jTable1.getValueAt(i, 4);
                    }
                }
                bw.write(String.join(" | ", parts));
                bw.newLine();
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Error saving appointments file", e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new StaffAddNewAppointment().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
